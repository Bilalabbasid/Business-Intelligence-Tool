# Generated by Django 4.2.7 on 2025-09-14 12:00

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import djongo.models.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Branch',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_active', models.BooleanField(default=True, help_text='Soft delete flag')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('branch_id', models.CharField(help_text='Unique branch identifier', max_length=50, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('location', djongo.models.fields.EmbeddedField(help_text='Branch location details', model_container='analytics.models.Location')),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('opening_hours', models.JSONField(default=dict, help_text='Store opening hours in JSON format')),
                ('capacity', models.PositiveIntegerField(blank=True, help_text='Maximum seating capacity', null=True)),
                ('manager', models.ForeignKey(blank=True, help_text='Branch manager', limit_choices_to={'role': 'manager'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='managed_branches', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Branch',
                'verbose_name_plural': 'Branches',
                'db_table': 'branches',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_active', models.BooleanField(default=True, help_text='Soft delete flag')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('customer_id', models.CharField(help_text='Unique customer identifier', max_length=50, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('phone', models.CharField(max_length=20, unique=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('loyalty_points', models.PositiveIntegerField(default=0)),
                ('total_spent', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('visit_count', models.PositiveIntegerField(default=0)),
                ('preferences', models.JSONField(default=dict, help_text='Customer preferences (dietary, favorite items, etc.)')),
                ('last_visit', models.DateTimeField(blank=True, null=True)),
                ('preferred_branch', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='preferred_customers', to='analytics.branch')),
            ],
            options={
                'verbose_name': 'Customer',
                'verbose_name_plural': 'Customers',
                'db_table': 'customers',
                'ordering': ['-last_visit'],
            },
        ),
        migrations.CreateModel(
            name='StaffPerformance',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_active', models.BooleanField(default=True, help_text='Soft delete flag')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('shift_date', models.DateField()),
                ('shift_start', models.TimeField()),
                ('shift_end', models.TimeField()),
                ('hours_worked', models.DecimalField(decimal_places=2, max_digits=4)),
                ('sales_generated', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('orders_served', models.PositiveIntegerField(default=0)),
                ('customer_feedback_score', models.DecimalField(blank=True, decimal_places=2, help_text='Average customer feedback score (0-5)', max_digits=3, null=True)),
                ('tips_received', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('break_minutes', models.PositiveIntegerField(default=0, help_text='Total break time in minutes')),
                ('notes', models.TextField(blank=True)),
                ('branch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='staff_performances', to='analytics.branch')),
                ('staff', models.ForeignKey(limit_choices_to={'role': 'staff'}, on_delete=django.db.models.deletion.CASCADE, related_name='performance_records', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Staff Performance',
                'verbose_name_plural': 'Staff Performances',
                'db_table': 'staff_performance',
                'ordering': ['-shift_date', '-shift_start'],
            },
        ),
        migrations.CreateModel(
            name='Sales',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_active', models.BooleanField(default=True, help_text='Soft delete flag')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('sale_id', models.CharField(help_text='Unique sale identifier', max_length=50, unique=True)),
                ('date', models.DateTimeField()),
                ('items', djongo.models.fields.ArrayField(help_text='List of items in the sale', model_container='analytics.models.SaleItem')),
                ('total_amount', models.DecimalField(decimal_places=2, max_digits=12)),
                ('tax_amount', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('discount_amount', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('payment_method', models.CharField(choices=[('cash', 'Cash'), ('card', 'Credit/Debit Card'), ('online', 'Online Payment'), ('loyalty', 'Loyalty Points'), ('voucher', 'Voucher/Gift Card')], default='cash', max_length=20)),
                ('order_type', models.CharField(choices=[('dine_in', 'Dine In'), ('takeaway', 'Takeaway'), ('delivery', 'Delivery'), ('online', 'Online Order')], default='dine_in', max_length=20)),
                ('branch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sales', to='analytics.branch')),
                ('customer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sales', to='analytics.customer')),
                ('served_by', models.ForeignKey(blank=True, limit_choices_to={'role': 'staff'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='served_sales', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Sale',
                'verbose_name_plural': 'Sales',
                'db_table': 'sales',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='Inventory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_active', models.BooleanField(default=True, help_text='Soft delete flag')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('inventory_id', models.CharField(help_text='Unique inventory identifier', max_length=50, unique=True)),
                ('item_name', models.CharField(max_length=200)),
                ('category', models.CharField(choices=[('food', 'Food Items'), ('beverage', 'Beverages'), ('packaging', 'Packaging Materials'), ('cleaning', 'Cleaning Supplies'), ('equipment', 'Equipment & Utensils'), ('other', 'Other')], max_length=20)),
                ('stock_quantity', models.DecimalField(decimal_places=2, max_digits=10)),
                ('unit', models.CharField(choices=[('kg', 'Kilograms'), ('g', 'Grams'), ('l', 'Liters'), ('ml', 'Milliliters'), ('pcs', 'Pieces'), ('box', 'Boxes'), ('pack', 'Packs'), ('bottle', 'Bottles'), ('can', 'Cans')], default='pcs', max_length=20)),
                ('reorder_level', models.DecimalField(decimal_places=2, help_text='Minimum stock threshold for reordering', max_digits=10)),
                ('unit_cost', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('supplier', models.CharField(blank=True, max_length=200)),
                ('supplier_contact', models.JSONField(default=dict, help_text='Supplier contact information')),
                ('expiry_date', models.DateField(blank=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('branch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inventory_items', to='analytics.branch')),
            ],
            options={
                'verbose_name': 'Inventory Item',
                'verbose_name_plural': 'Inventory Items',
                'db_table': 'inventory',
                'ordering': ['item_name'],
                'unique_together': {('branch', 'item_name')},
            },
        ),
        migrations.AddIndex(
            model_name='branch',
            index=models.Index(fields=['branch_id'], name='branches_branch__5f2b8c_idx'),
        ),
        migrations.AddIndex(
            model_name='branch',
            index=models.Index(fields=['name'], name='branches_name_f8e6a1_idx'),
        ),
        migrations.AddIndex(
            model_name='branch',
            index=models.Index(fields=['manager'], name='branches_manager_7f8e22_idx'),
        ),
        migrations.AddIndex(
            model_name='branch',
            index=models.Index(fields=['is_active'], name='branches_is_acti_9d24f3_idx'),
        ),
        migrations.AddIndex(
            model_name='customer',
            index=models.Index(fields=['customer_id'], name='customers_custome_c9e5a6_idx'),
        ),
        migrations.AddIndex(
            model_name='customer',
            index=models.Index(fields=['phone'], name='customers_phone_8f9e14_idx'),
        ),
        migrations.AddIndex(
            model_name='customer',
            index=models.Index(fields=['email'], name='customers_email_9a7b32_idx'),
        ),
        migrations.AddIndex(
            model_name='customer',
            index=models.Index(fields=['preferred_branch'], name='customers_preferr_1e8f77_idx'),
        ),
        migrations.AddIndex(
            model_name='customer',
            index=models.Index(fields=['loyalty_points'], name='customers_loyalty_4c6d21_idx'),
        ),
        migrations.AddIndex(
            model_name='customer',
            index=models.Index(fields=['last_visit'], name='customers_last_vi_5e9a88_idx'),
        ),
        migrations.AddIndex(
            model_name='customer',
            index=models.Index(fields=['is_active'], name='customers_is_acti_7d2c41_idx'),
        ),
        migrations.AddIndex(
            model_name='inventory',
            index=models.Index(fields=['inventory_id'], name='inventory_invento_8b4e99_idx'),
        ),
        migrations.AddIndex(
            model_name='inventory',
            index=models.Index(fields=['branch', 'category'], name='inventory_branch__6c7a55_idx'),
        ),
        migrations.AddIndex(
            model_name='inventory',
            index=models.Index(fields=['item_name'], name='inventory_item_na_9e8f44_idx'),
        ),
        migrations.AddIndex(
            model_name='inventory',
            index=models.Index(fields=['category'], name='inventory_categor_2a9b66_idx'),
        ),
        migrations.AddIndex(
            model_name='inventory',
            index=models.Index(fields=['reorder_level'], name='inventory_reorder_7f3c88_idx'),
        ),
        migrations.AddIndex(
            model_name='inventory',
            index=models.Index(fields=['last_updated'], name='inventory_last_up_4e5d77_idx'),
        ),
        migrations.AddIndex(
            model_name='inventory',
            index=models.Index(fields=['is_active'], name='inventory_is_acti_8a1b99_idx'),
        ),
        migrations.AddIndex(
            model_name='sales',
            index=models.Index(fields=['sale_id'], name='sales_sale_id_3f6e22_idx'),
        ),
        migrations.AddIndex(
            model_name='sales',
            index=models.Index(fields=['branch', 'date'], name='sales_branch__8d7c44_idx'),
        ),
        migrations.AddIndex(
            model_name='sales',
            index=models.Index(fields=['date'], name='sales_date_9a5e11_idx'),
        ),
        migrations.AddIndex(
            model_name='sales',
            index=models.Index(fields=['customer'], name='sales_customer_6b8f33_idx'),
        ),
        migrations.AddIndex(
            model_name='sales',
            index=models.Index(fields=['payment_method'], name='sales_payment_7e2d44_idx'),
        ),
        migrations.AddIndex(
            model_name='sales',
            index=models.Index(fields=['served_by'], name='sales_served_b_5a9c77_idx'),
        ),
        migrations.AddIndex(
            model_name='sales',
            index=models.Index(fields=['is_active'], name='sales_is_activ_4f7e88_idx'),
        ),
        migrations.AddIndex(
            model_name='staffperformance',
            index=models.Index(fields=['staff', 'shift_date'], name='staff_perfo_staff_i_8e6f44_idx'),
        ),
        migrations.AddIndex(
            model_name='staffperformance',
            index=models.Index(fields=['branch', 'shift_date'], name='staff_perfo_branch__7d5c33_idx'),
        ),
        migrations.AddIndex(
            model_name='staffperformance',
            index=models.Index(fields=['shift_date'], name='staff_perfo_shift_d_9a8e22_idx'),
        ),
        migrations.AddIndex(
            model_name='staffperformance',
            index=models.Index(fields=['customer_feedback_score'], name='staff_perfo_custome_6b7f11_idx'),
        ),
        migrations.AddIndex(
            model_name='staffperformance',
            index=models.Index(fields=['is_active'], name='staff_perfo_is_acti_4e9d66_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='staffperformance',
            unique_together={('staff', 'branch', 'shift_date', 'shift_start')},
        ),
    ]