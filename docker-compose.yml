# Docker Compose for Business Intelligence Tool
version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: bi_warehouse
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./bi_tool/etl/ddl/postgresql_warehouse_schema.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

  # MongoDB Database
  mongodb:
    image: mongo:6.0
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: bi_raw_data
    volumes:
      - mongodb_data:/data/db
    ports:
      - "27017:27017"
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ClickHouse (Optional - for analytics)
  clickhouse:
    image: clickhouse/clickhouse-server:23-alpine
    environment:
      CLICKHOUSE_DB: warehouse
      CLICKHOUSE_USER: default
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
    volumes:
      - clickhouse_data:/var/lib/clickhouse
      - ./bi_tool/etl/ddl/clickhouse_warehouse_schema.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "8123:8123"
      - "9000:9000"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8123/ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Django Backend
  backend:
    build:
      context: ./bi_tool
      dockerfile: Dockerfile
    environment:
      - DEBUG=True
      - DATABASE_URL=postgres://postgres:password123@postgres:5432/bi_warehouse
      - MONGODB_HOST=mongodb
      - MONGODB_PORT=27017
      - MONGODB_USER=admin
      - MONGODB_PASSWORD=password123
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - CLICKHOUSE_HOST=clickhouse
      - CLICKHOUSE_PORT=8123
    volumes:
      - ./bi_tool:/app
      - media_files:/app/media
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "
        python manage.py migrate &&
        python manage.py collectstatic --noinput &&
        python manage.py runserver 0.0.0.0:8000
      "

  # Celery Worker
  celery-worker:
    build:
      context: ./bi_tool
      dockerfile: Dockerfile
    environment:
      - DEBUG=True
      - DATABASE_URL=postgres://postgres:password123@postgres:5432/bi_warehouse
      - MONGODB_HOST=mongodb
      - MONGODB_PORT=27017
      - MONGODB_USER=admin
      - MONGODB_PASSWORD=password123
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./bi_tool:/app
      - media_files:/app/media
    depends_on:
      - redis
      - postgres
      - mongodb
    command: celery -A bi_tool worker -l info

  # Celery Beat Scheduler
  celery-beat:
    build:
      context: ./bi_tool
      dockerfile: Dockerfile
    environment:
      - DEBUG=True
      - DATABASE_URL=postgres://postgres:password123@postgres:5432/bi_warehouse
      - MONGODB_HOST=mongodb
      - MONGODB_PORT=27017
      - MONGODB_USER=admin
      - MONGODB_PASSWORD=password123
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./bi_tool:/app
      - media_files:/app/media
    depends_on:
      - redis
      - postgres
      - mongodb
    command: celery -A bi_tool beat -l info

  # Flower (Celery Monitoring)
  flower:
    build:
      context: ./bi_tool
      dockerfile: Dockerfile
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    ports:
      - "5555:5555"
    depends_on:
      - redis
    command: celery -A bi_tool flower --port=5555

  # React Frontend
  frontend:
    build:
      context: ./bi-frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000/api
      - REACT_APP_WS_URL=ws://localhost:8000/ws
    volumes:
      - ./bi-frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    command: npm run dev

  # Nginx (Production)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - static_files:/var/www/static
      - media_files:/var/www/media
    depends_on:
      - backend
      - frontend
    profiles:
      - production

volumes:
  postgres_data:
  mongodb_data:
  redis_data:
  clickhouse_data:
  static_files:
  media_files:

networks:
  default:
    name: bi-network